apiVersion: tempo.grafana.com/v1alpha1   # APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
kind: TempoStack                         # Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
metadata:
  name: example
spec:                                    # TempoStackSpec defines the desired state of TempoStack.
  extraConfig:                           # ExtraConfigSpec defines extra configurations for tempo that will be merged with the operator generated, configurations defined here has precedence and could override generated config.
    tempo: {}                            # Tempo defines any extra Tempo configuration, which will be merged with the operator's generated Tempo configuration
  hashRing:                              # HashRing defines the spec for the distributed hash ring configuration.
    memberlist:                          # MemberList configuration spec
      enableIPv6: false                  # EnableIPv6 enables IPv6 support for the memberlist based hash ring.
      instanceAddrType: ""               # InstanceAddrType defines the type of address to use to advertise to the ring. Defaults to the first address from any private network interfaces of the current pod. Alternatively the public pod IP can be used in case private networks (RFC 1918 and RFC 6598) are not available.
  images:                                # Images defines the image for each container.
    jaegerQuery: ""                      # JaegerQuery defines the tempo-query container image.
    oauthProxy: ""                       # OauthProxy defines the oauth proxy image used to protect the jaegerUI on single tenant.
    tempo: ""                            # Tempo defines the tempo container image.
    tempoGateway: ""                     # TempoGateway defines the tempo-gateway container image.
    tempoGatewayOpa: ""                  # TempoGatewayOpa defines the OPA sidecar container for TempoGateway.
    tempoQuery: ""                       # TempoQuery defines the tempo-query container image.
  limits:                                # LimitSpec is used to limit ingestion and querying rates.
    global:                              # Global is used to define global rate limits.
      ingestion:                         # Ingestion is used to define ingestion rate limits.
        ingestionBurstSizeBytes: 0       # IngestionBurstSizeBytes defines the burst size (bytes) used in ingestion.
        ingestionRateLimitBytes: 0       # IngestionRateLimitBytes defines the Per-user ingestion rate limit (bytes) used in ingestion.
        maxBytesPerTrace: 0              # MaxBytesPerTrace defines the maximum number of bytes of an acceptable trace.
        maxTracesPerUser: 0              # MaxTracesPerUser defines the maximum number of traces a user can send.
      query:                             # Query is used to define query rate limits.
        maxBytesPerTagValues: 0          # MaxBytesPerTagValues defines the maximum size in bytes of a tag-values query.
        maxSearchBytesPerTrace: 0        # DEPRECATED. MaxSearchBytesPerTrace defines the maximum size of search data for a single trace in bytes. default: `0` to disable.
        maxSearchDuration: ""            # MaxSearchDuration defines the maximum allowed time range for a search. If this value is not set, then spec.search.maxDuration is used.
    perTenant:                           # PerTenant is used to define rate limits per tenant.
      "key":                             # RateLimitSpec defines rate limits for Ingestion and Query components.
        ingestion:                       # Ingestion is used to define ingestion rate limits.
          ingestionBurstSizeBytes: 0     # IngestionBurstSizeBytes defines the burst size (bytes) used in ingestion.
          ingestionRateLimitBytes: 0     # IngestionRateLimitBytes defines the Per-user ingestion rate limit (bytes) used in ingestion.
          maxBytesPerTrace: 0            # MaxBytesPerTrace defines the maximum number of bytes of an acceptable trace.
          maxTracesPerUser: 0            # MaxTracesPerUser defines the maximum number of traces a user can send.
        query:                           # Query is used to define query rate limits.
          maxBytesPerTagValues: 0        # MaxBytesPerTagValues defines the maximum size in bytes of a tag-values query.
          maxSearchBytesPerTrace: 0      # DEPRECATED. MaxSearchBytesPerTrace defines the maximum size of search data for a single trace in bytes. default: `0` to disable.
          maxSearchDuration: ""          # MaxSearchDuration defines the maximum allowed time range for a search. If this value is not set, then spec.search.maxDuration is used.
  managementState: "Managed"             # ManagementState defines if the CR should be managed by the operator or not. Default is managed.
  observability:                         # ObservabilitySpec defines how telemetry data gets handled.
    grafana:                             # Grafana defines the Grafana configuration for operands.
      createDatasource: false            # CreateDatasource specifies if a Grafana Datasource should be created for Tempo.
      instanceSelector:                  # InstanceSelector specifies the Grafana instance where the datasource should be created.
        matchExpressions:                # matchExpressions is a list of label selector requirements. The requirements are ANDed.
        - key: ""                        # key is the label key that the selector applies to.
          operator: ""                   # operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
          values:                        # values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
          - ""
        matchLabels: {}                  # matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    metrics:                             # Metrics defines the metrics configuration for operands.
      createPrometheusRules: false       # CreatePrometheusRules specifies if Prometheus rules for alerts should be created for Tempo components.
      createServiceMonitors: false       # CreateServiceMonitors specifies if ServiceMonitors should be created for Tempo components.
    tracing:                             # Tracing defines a config for operands.
      jaeger_agent_endpoint: "localhost:6831" # JaegerAgentEndpoint defines the jaeger endpoint data gets send to.
      sampling_fraction: ""              # SamplingFraction defines the sampling ratio. Valid values are 0 to 1.
  replicationFactor: 0                   # The replication factor is a configuration setting that determines how many ingesters need to acknowledge the data from the distributors before accepting a span.
  retention:                             # Retention period defined by dataset. User can specify how long data should be stored.
    global:                              # Global is used to configure global retention.
      traces: ""                         # Traces defines retention period. Supported parameter suffixes are "s", "m" and "h". example: 336h default: value is 48h.
    perTenant:                           # PerTenant is used to configure retention per tenant.
      "key":                             # RetentionConfig defines how long data should be provided.
        traces: ""                       # Traces defines retention period. Supported parameter suffixes are "s", "m" and "h". example: 336h default: value is 48h.
  search:                                # SearchSpec control the configuration for the search capabilities.
    defaultResultLimit: 0                # Limit used for search requests if none is set by the caller (default: 20)
    maxDuration: ""                      # The maximum allowed time range for a search, default: 0s which means unlimited.
    maxResultLimit: 0                    # The maximum allowed value of the limit parameter on search requests. If the search request limit parameter exceeds the value configured here it will be set to the value configured here. The default value of 0 disables this limit.
  serviceAccount: ""                     # ServiceAccount defines the service account to use for all tempo components.
  storage:                               # Storage defines the spec for the object storage endpoint to store traces. User is required to create secret and supply it.
    secret:                              # Secret for object storage authentication. Name of a secret in the same namespace as the TempoStack custom resource.
      name: ""                           # Name of a secret in the namespace configured for object storage secrets.
      type: ""                           # Type of object storage that should be used
    tls:                                 # TLS configuration for reaching the object storage endpoint.
      enabled: false                     # Enabled defines if TLS is enabled.
      caName: ""                         # CA is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
      certName: ""                       # Cert is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
      minVersion: ""                     # MinVersion defines the minimum acceptable TLS version.
  storageClassName: ""                   # StorageClassName for PVCs used by ingester. Defaults to nil (default storage class in the cluster).
  storageSize: "10Gi"                    # StorageSize for PVCs used by ingester. Defaults to 10Gi.
  template:                              # Template defines requirements for a set of tempo components.
    compactor:                           # Compactor defines the tempo compactor component spec.
      podSecurityContext:                # PodSecurityContext defines security context will be applied to all pods of this component.
        fsGroup: 0                       # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
        fsGroupChangePolicy: ""          # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
        runAsGroup: 0                    # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        runAsNonRoot: false              # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        runAsUser: 0                     # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        seLinuxOptions:                  # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          level: ""                      # Level is SELinux level label that applies to the container.
          role: ""                       # Role is a SELinux role label that applies to the container.
          type: ""                       # Type is a SELinux type label that applies to the container.
          user: ""                       # User is a SELinux user label that applies to the container.
        seccompProfile:                  # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
          localhostProfile: ""           # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
          type: ""                       # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        supplementalGroups:              # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
        - 0
        sysctls:                         # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
        - name: ""                       # Name of a property to set
          value: ""                      # Value of a property to set
        windowsOptions:                  # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
          gmsaCredentialSpec: ""         # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
          gmsaCredentialSpecName: ""     # GMSACredentialSpecName is the name of the GMSA credential spec to use.
          hostProcess: false             # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
          runAsUserName: ""              # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      replicas: 0                        # Replicas defines the number of replicas to be created for this component.
      nodeSelector: {}                   # NodeSelector defines the simple form of the node-selection constraint.
      resources:                         # Resources defines resources for this component, this will override the calculated resources derived from total
        claims:                          # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
        - name: ""                       # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
        limits:                          # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "750m"
          memory: "2Gi"
        requests:                        # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "500m"
          memory: "1Gi"
      tolerations: {}                    # Tolerations defines component-specific pod tolerations.
    distributor:                         # Distributor defines the distributor component spec.
      component:                         # TempoComponentSpec is embedded to extend this definition with further options.   Currently, there is no way to inline this field. See: https://github.com/golang/go/issues/6213
        podSecurityContext:              # PodSecurityContext defines security context will be applied to all pods of this component.
          fsGroup: 0                     # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
          fsGroupChangePolicy: ""        # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
          runAsGroup: 0                  # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          runAsNonRoot: false            # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          runAsUser: 0                   # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          seLinuxOptions:                # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            level: ""                    # Level is SELinux level label that applies to the container.
            role: ""                     # Role is a SELinux role label that applies to the container.
            type: ""                     # Type is a SELinux type label that applies to the container.
            user: ""                     # User is a SELinux user label that applies to the container.
          seccompProfile:                # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
            localhostProfile: ""         # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
            type: ""                     # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
          supplementalGroups:            # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
          - 0
          sysctls:                       # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
          - name: ""                     # Name of a property to set
            value: ""                    # Value of a property to set
          windowsOptions:                # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
            gmsaCredentialSpec: ""       # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
            gmsaCredentialSpecName: ""   # GMSACredentialSpecName is the name of the GMSA credential spec to use.
            hostProcess: false           # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
            runAsUserName: ""            # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        replicas: 0                      # Replicas defines the number of replicas to be created for this component.
        nodeSelector: {}                 # NodeSelector defines the simple form of the node-selection constraint.
        resources:                       # Resources defines resources for this component, this will override the calculated resources derived from total
          claims:                        # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
          - name: ""                     # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
          limits:                        # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "750m"
            memory: "2Gi"
          requests:                      # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "500m"
            memory: "1Gi"
        tolerations: {}                  # Tolerations defines component-specific pod tolerations.
      tls:                               # TLS defines TLS configuration for distributor receivers   If openshift feature flag `servingCertsService` is enabled and TLS is enabled but no certName or caName is specified, OpenShift service serving certificates will  be used.
        enabled: false                   # Enabled defines if TLS is enabled.
        caName: ""                       # CA is the name of a ConfigMap containing a CA certificate (service-ca.crt). It needs to be in the same namespace as the Tempo custom resource.
        certName: ""                     # Cert is the name of a Secret containing a certificate (tls.crt) and private key (tls.key). It needs to be in the same namespace as the Tempo custom resource.
        minVersion: ""                   # MinVersion defines the minimum acceptable TLS version.
    gateway:                             # Gateway defines the tempo gateway spec.
      enabled: false
      component:                         # TempoComponentSpec is embedded to extend this definition with further options.   Currently there is no way to inline this field. See: https://github.com/golang/go/issues/6213
        podSecurityContext:              # PodSecurityContext defines security context will be applied to all pods of this component.
          fsGroup: 0                     # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
          fsGroupChangePolicy: ""        # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
          runAsGroup: 0                  # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          runAsNonRoot: false            # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          runAsUser: 0                   # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          seLinuxOptions:                # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            level: ""                    # Level is SELinux level label that applies to the container.
            role: ""                     # Role is a SELinux role label that applies to the container.
            type: ""                     # Type is a SELinux type label that applies to the container.
            user: ""                     # User is a SELinux user label that applies to the container.
          seccompProfile:                # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
            localhostProfile: ""         # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
            type: ""                     # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
          supplementalGroups:            # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
          - 0
          sysctls:                       # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
          - name: ""                     # Name of a property to set
            value: ""                    # Value of a property to set
          windowsOptions:                # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
            gmsaCredentialSpec: ""       # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
            gmsaCredentialSpecName: ""   # GMSACredentialSpecName is the name of the GMSA credential spec to use.
            hostProcess: false           # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
            runAsUserName: ""            # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        replicas: 0                      # Replicas defines the number of replicas to be created for this component.
        nodeSelector: {}                 # NodeSelector defines the simple form of the node-selection constraint.
        resources:                       # Resources defines resources for this component, this will override the calculated resources derived from total
          claims:                        # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
          - name: ""                     # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
          limits:                        # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "750m"
            memory: "2Gi"
          requests:                      # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "500m"
            memory: "1Gi"
        tolerations: {}                  # Tolerations defines component-specific pod tolerations.
      ingress:                           # Ingress defines gateway Ingress options.
        annotations: {}                  # Annotations defines the annotations of the Ingress object.
        host: ""                         # Host defines the hostname of the Ingress object.
        ingressClassName: ""             # IngressClassName defines the name of an IngressClass cluster resource. Defines which ingress controller serves this ingress resource.
        route:                           # Route defines the options for the OpenShift route.
          termination: ""                # Termination defines the termination type. The default is "edge".
        type: ""                         # Type defines the type of Ingress for the Jaeger Query UI. Currently ingress, route and none are supported.
    ingester:                            # Ingester defines the ingester component spec.
      podSecurityContext:                # PodSecurityContext defines security context will be applied to all pods of this component.
        fsGroup: 0                       # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
        fsGroupChangePolicy: ""          # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
        runAsGroup: 0                    # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        runAsNonRoot: false              # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        runAsUser: 0                     # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        seLinuxOptions:                  # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          level: ""                      # Level is SELinux level label that applies to the container.
          role: ""                       # Role is a SELinux role label that applies to the container.
          type: ""                       # Type is a SELinux type label that applies to the container.
          user: ""                       # User is a SELinux user label that applies to the container.
        seccompProfile:                  # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
          localhostProfile: ""           # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
          type: ""                       # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        supplementalGroups:              # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
        - 0
        sysctls:                         # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
        - name: ""                       # Name of a property to set
          value: ""                      # Value of a property to set
        windowsOptions:                  # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
          gmsaCredentialSpec: ""         # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
          gmsaCredentialSpecName: ""     # GMSACredentialSpecName is the name of the GMSA credential spec to use.
          hostProcess: false             # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
          runAsUserName: ""              # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      replicas: 0                        # Replicas defines the number of replicas to be created for this component.
      nodeSelector: {}                   # NodeSelector defines the simple form of the node-selection constraint.
      resources:                         # Resources defines resources for this component, this will override the calculated resources derived from total
        claims:                          # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
        - name: ""                       # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
        limits:                          # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "750m"
          memory: "2Gi"
        requests:                        # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "500m"
          memory: "1Gi"
      tolerations: {}                    # Tolerations defines component-specific pod tolerations.
    querier:                             # Querier defines the querier component spec.
      podSecurityContext:                # PodSecurityContext defines security context will be applied to all pods of this component.
        fsGroup: 0                       # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
        fsGroupChangePolicy: ""          # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
        runAsGroup: 0                    # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        runAsNonRoot: false              # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        runAsUser: 0                     # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        seLinuxOptions:                  # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          level: ""                      # Level is SELinux level label that applies to the container.
          role: ""                       # Role is a SELinux role label that applies to the container.
          type: ""                       # Type is a SELinux type label that applies to the container.
          user: ""                       # User is a SELinux user label that applies to the container.
        seccompProfile:                  # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
          localhostProfile: ""           # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
          type: ""                       # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        supplementalGroups:              # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
        - 0
        sysctls:                         # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
        - name: ""                       # Name of a property to set
          value: ""                      # Value of a property to set
        windowsOptions:                  # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
          gmsaCredentialSpec: ""         # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
          gmsaCredentialSpecName: ""     # GMSACredentialSpecName is the name of the GMSA credential spec to use.
          hostProcess: false             # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
          runAsUserName: ""              # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      replicas: 0                        # Replicas defines the number of replicas to be created for this component.
      nodeSelector: {}                   # NodeSelector defines the simple form of the node-selection constraint.
      resources:                         # Resources defines resources for this component, this will override the calculated resources derived from total
        claims:                          # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
        - name: ""                       # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
        limits:                          # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "750m"
          memory: "2Gi"
        requests:                        # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          cpu: "500m"
          memory: "1Gi"
      tolerations: {}                    # Tolerations defines component-specific pod tolerations.
    queryFrontend:                       # TempoQueryFrontendSpec defines the query frontend spec.
      component:                         # TempoComponentSpec is embedded to extend this definition with further options.   Currently there is no way to inline this field. See: https://github.com/golang/go/issues/6213
        podSecurityContext:              # PodSecurityContext defines security context will be applied to all pods of this component.
          fsGroup: 0                     # A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:   1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----   If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
          fsGroupChangePolicy: ""        # fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
          runAsGroup: 0                  # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          runAsNonRoot: false            # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          runAsUser: 0                   # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          seLinuxOptions:                # The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            level: ""                    # Level is SELinux level label that applies to the container.
            role: ""                     # Role is a SELinux role label that applies to the container.
            type: ""                     # Type is a SELinux type label that applies to the container.
            user: ""                     # User is a SELinux user label that applies to the container.
          seccompProfile:                # The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
            localhostProfile: ""         # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
            type: ""                     # type indicates which kind of seccomp profile will be applied. Valid options are:   Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
          supplementalGroups:            # A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
          - 0
          sysctls:                       # Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
          - name: ""                     # Name of a property to set
            value: ""                    # Value of a property to set
          windowsOptions:                # The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
            gmsaCredentialSpec: ""       # GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
            gmsaCredentialSpecName: ""   # GMSACredentialSpecName is the name of the GMSA credential spec to use.
            hostProcess: false           # HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
            runAsUserName: ""            # The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        replicas: 0                      # Replicas defines the number of replicas to be created for this component.
        nodeSelector: {}                 # NodeSelector defines the simple form of the node-selection constraint.
        resources:                       # Resources defines resources for this component, this will override the calculated resources derived from total
          claims:                        # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
          - name: ""                     # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
          limits:                        # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "750m"
            memory: "2Gi"
          requests:                      # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "500m"
            memory: "1Gi"
        tolerations: {}                  # Tolerations defines component-specific pod tolerations.
      jaegerQuery:                       # JaegerQuery defines options specific to the Jaeger Query component.
        enabled: false                   # Enabled defines if the Jaeger Query component should be created.
        authentication:                  # Authentication defines the options for the oauth proxy used to protect jaeger UI
          enabled: false                 # Defines if the authentication will be enabled for jaeger UI.
          sar: ""                        # SAR defines the SAR to be used in the oauth-proxy default is "{"namespace": "<tempo_stack_namespace>", "resource": "pods", "verb": "get"}
          resources:                     # Resources defines the compute resource requirements of the OAuth Proxy container. The OAuth Proxy performs authentication and authorization of incoming requests to Jaeger UI when multi-tenancy is disabled.
            claims:                      # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
            - name: ""                   # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
            limits:                      # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              cpu: "750m"
              memory: "2Gi"
            requests:                    # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              cpu: "500m"
              memory: "1Gi"
        findTracesConcurrentRequests: 0  # FindTracesConcurrentRequests defines how many concurrent request a single trace search can submit (defaults querier.replicas*2). The search for traces in Jaeger submits limit+1 requests. First requests finds trace IDs and then it fetches entire traces by ID. This property allows Jaeger to fetch traces in parallel. Note that by default a single Tempo querier can process 20 concurrent search jobs. Increasing this property might require scaling up querier instances, especially on error "job queue full" See also Tempo's extraConfig: querier.max_concurrent_queries (20 default) query_frontend.max_outstanding_per_tenant: (2000 default). Increase if the query-frontend returns 429
        ingress:                         # Ingress defines the options for the Jaeger Query ingress.
          annotations: {}                # Annotations defines the annotations of the Ingress object.
          host: ""                       # Host defines the hostname of the Ingress object.
          ingressClassName: ""           # IngressClassName defines the name of an IngressClass cluster resource. Defines which ingress controller serves this ingress resource.
          route:                         # Route defines the options for the OpenShift route.
            termination: ""              # Termination defines the termination type. The default is "edge".
          type: ""                       # Type defines the type of Ingress for the Jaeger Query UI. Currently ingress, route and none are supported.
        monitorTab:                      # MonitorTab defines the monitor tab configuration.
          enabled: false                 # Enabled enables the monitor tab in the Jaeger console. The PrometheusEndpoint must be configured to enable this feature.
          prometheusEndpoint: ""         # PrometheusEndpoint defines the endpoint to the Prometheus instance that contains the span rate, error, and duration (RED) metrics. For instance on OpenShift this is set to https://thanos-querier.openshift-monitoring.svc.cluster.local:9091
        servicesQueryDuration: ""        # ServicesQueryDuration defines how long the services will be available in the services list
        tempoQuery:                      # TempoQuery defines options specific to the Tempoo Query component.
          resources:                     # Resources defines resources for this component, this will override the calculated resources derived from total
            claims:                      # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
            - name: ""                   # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
            limits:                      # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              cpu: "750m"
              memory: "2Gi"
            requests:                    # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              cpu: "500m"
              memory: "1Gi"
        resources:                       # Resources defines resources for this component, this will override the calculated resources derived from total
          claims:                        # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
          - name: ""                     # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
          limits:                        # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "750m"
            memory: "2Gi"
          requests:                      # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            cpu: "500m"
            memory: "1Gi"
  tenants:                               # Tenants defines the per-tenant authentication and authorization spec.
    authentication:                      # Authentication defines the tempo-gateway component authentication configuration spec per tenant.
    - oidc:                              # OIDC defines the spec for the OIDC tenant's authentication.
        groupClaim: ""                   # Group claim field from ID Token
        issuerURL: ""                    # IssuerURL defines the URL for issuer.
        redirectURL: ""                  # RedirectURL defines the URL for redirect.
        secret:                          # Secret defines the spec for the clientID, clientSecret and issuerCAPath for tenant's authentication.
          name: ""                       # Name of a secret in the namespace configured for tenant secrets.
        usernameClaim: ""                # User claim field from ID Token
      tenantId: ""                       # TenantID defines a universally unique identifier of the tenant. Unlike the tenantName, which must be unique at a given time, the tenantId must be unique over the entire lifetime of the Tempo deployment. Tempo uses this ID to prefix objects in the object storage.
      tenantName: ""                     # TenantName defines a human readable, unique name of the tenant. The value of this field must be specified in the X-Scope-OrgID header and in the resources field of a ClusterRole to identify the tenant.
    authorization:                       # Authorization defines the tempo-gateway component authorization configuration spec per tenant.
      roleBindings:                      # RoleBindings defines configuration to bind a set of roles to a set of subjects.
      - name: ""
        roles:
        - ""
        subjects:
        - kind: ""                       # SubjectKind is a kind of Tempo Gateway RBAC subject.
          name: ""
      roles:                             # Roles defines a set of permissions to interact with a tenant.
      - name: ""
        permissions:
        - ""                             # PermissionType is a Tempo Gateway RBAC permission.
        tenants:
        - ""
        resources:
        - ""
    mode: "static"                       # Mode defines the multitenancy mode.
  timeout: ""                            # Timeout configures the same timeout on all components starting at ingress down to the ingestor/querier. Timeout configuration on a specific component has a higher precedence. Defaults to 30 seconds.
  resources:                             # Resources defines resources configuration.
    total:                               # The total amount of resources for Tempo instance. The operator autonomously splits resources between deployed Tempo components. Only limits are supported, the operator calculates requests automatically. See http://github.com/grafana/tempo/issues/1540.
      claims:                            # Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers.
      - name: ""                         # Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
      limits:                            # Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        cpu: "750m"
        memory: "2Gi"
      requests:                          # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        cpu: "500m"
        memory: "1Gi"
status:                                  # TempoStackStatus defines the observed state of TempoStack.
  components:                            # Components provides summary of all Tempo pod status grouped per component.
    compactor:                           # Compactor is a map to the pod status of the compactor pod.
      "key":
      - ""
    distributor:                         # Distributor is a map to the per pod status of the distributor deployment
      "key":
      - ""
    gateway:                             # Gateway is a map to the per pod status of the query frontend deployment
      "key":
      - ""
    ingester:                            # Ingester is a map to the per pod status of the ingester statefulset
      "key":
      - ""
    querier:                             # Querier is a map to the per pod status of the querier deployment
      "key":
      - ""
    queryFrontend:                       # QueryFrontend is a map to the per pod status of the query frontend deployment
      "key":
      - ""
  conditions:                            # Conditions of the Tempo deployment health.
  - lastTransitionTime: "2006-01-02T15:04:05Z" # lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message: ""                          # message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration: 0                # observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason: ""                           # reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status: ""                           # status of the condition, one of True, False, Unknown.
    type: ""                             # type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
  operatorVersion: ""                    # Version of the Tempo Operator.
  tempoQueryVersion: ""                  # DEPRECATED. Version of the Tempo Query component used.
  tempoVersion: ""                       # Version of the managed Tempo instance.
